@using Estream.Cart42.Web.Areas.Admin.Models
@using Estream.Cart42.Web.Domain
@using EnumHelper = System.Web.Mvc.Html.EnumHelper
@model OptionCategoryEditViewModel

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @Html.ValidationSummary()
    </div>
}
<div id="divOptionCategory" data-bind="with: optionCategory">
    <ul class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#category" role="tab" data-toggle="tab">@Html.TA("Option Category Details")</a></li>
        <li id="tabOptions"><a href="#options" role="tab" data-toggle="tab">@Html.TA("Options")</a></li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane active" id="category">
            <br />
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <select id="@Html.IdFor(m => m.Type)" name="@Html.NameFor(m => m.Type)" class="form-control" data-bind="value: type">
                        @foreach (SelectListItem item in EnumHelper.GetSelectList(typeof(OptionCategoryType), Model.Type))
                        {
                            <option value="@item.Value" @(item.Selected ? "selected" : "")>@item.Text.TA()</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IncludeInFilters, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IncludeInFilters)
                        @Html.ValidationMessageFor(model => model.IncludeInFilters, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane" id="options">
            <br />
            <div id="optionInputs" data-bind="foreach: options">
                <div class="form-group">
                    <input data-bind="attr: { id: '@(Html.IdFor(m => m.Options))[' + $index() + ']_Id', name: '@(Html.NameFor(m => m.Options))[' + $index() + '].Id' }, value: id" type="hidden" />
                    <input data-bind="attr: { id: '@(Html.IdFor(m => m.Options))[' + $index() + ']_OptionCategoryId', name: '@(Html.NameFor(m => m.Options))[' + $index() + '].OptionCategoryId' }, value: optionCategoryId" type="hidden" />
                    <label class="control-label col-md-2">@Html.TA("Option")</label>
                    <div class="col-md-10">
                        <div class="input-group">
                            <input data-bind="attr: { id: '@(Html.IdFor(m => m.Options))[' + $index() + ']_Name', name: '@(Html.NameFor(m => m.Options))[' + $index() + '].Name' }, value: name" type="text" class="form-control" />
                            <span class="input-group-btn">
                                <button class="btn btn-danger" data-bind="click: $parent.removeOption"><span class="fa fa-times"></span></button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group" data-bind="if: $parent.type() == '@OptionCategoryType.Colors' || $parent.type() == @((int)OptionCategoryType.Colors)">
                    <div class=" col-md-offset-2 col-md-2">
                        <input data-bind="attr: { id: '@(Html.IdFor(m => m.Options))[' + $index() + ']_Description', name: '@(Html.NameFor(m => m.Options))[' + $index() + '].Description' }, value: description, colorPicker: description" type="text" class="pick-a-color form-control" />
                    </div>
                </div>
            </div>
            <button id="btnAddOption" type="button" class="btn btn-primary btn-outline" data-bind="click: addOption"><span class="fa fa-plus"></span> @Html.TA("Add Option")</button>
        </div>
    </div>
</div>

<script src="@Url.Content("~/Content/admin/js/tinycolor.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/js/pick-a-color.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(function () {
        function optionCategoryEditViewModel(data) {
            var self = this;
            ko.mapping.fromJS(data, {}, self);

            self.addOption = function () {
                self.options.push(ko.mapping.fromJS(@Html.Json(new OptionEditViewModel())));
            }

            self.removeOption = function (option) {
                self.options.remove(option);
            }

            return self;
        };

        ko.bindingHandlers.colorPicker = {
            init: function (element) {
                $(element).pickAColor({ inlineDropdown: true });
            }
        }

        var model = new optionCategoryEditViewModel(@Html.Json(Model));
        window.ViewModel.optionCategory = model;
    });
</script>