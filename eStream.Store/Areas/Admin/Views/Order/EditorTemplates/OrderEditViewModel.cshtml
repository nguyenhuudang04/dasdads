@using Estream.Cart42.Web.Domain
@using Estream.Cart42.Web.Models
@model Estream.Cart42.Web.Areas.Admin.Models.OrderEditViewModel

<div id="divOrderDetails" data-bind="with: order">

    <ul class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#customer" role="tab" data-toggle="tab">@Html.TA("Customer Details")</a></li>
        <li><a href="#items" role="tab" data-toggle="tab">@Html.TA("Order Items")</a></li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane active" id="customer">
            <br />
            @if (Model.Id == 0)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.UserEmail, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserEmail, new {htmlAttributes = new {@class = "form-control", data_bind = "value: userEmail"}})
                        @Html.ValidationMessageFor(model => model.UserEmail, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="hr-line-dashed"></div>
            }
            <h4>@Html.TA("Billing Address")</h4>
            <div data-bind="with: billingAddress">
                @Html.EditorFor(model => model.BillingAddress)
            </div>
            <div class="hr-line-dashed"></div>
            <h4>@Html.TA("Shipping Address")</h4>
            <div>
                <label><input type="checkbox" data-bind="checked: sameShippingAddress" /> @Html.TA("Same as billing address")</label>
            </div>
            <div data-bind="visible: !sameShippingAddress(), with: shippingAddress">
                @Html.EditorFor(model => model.ShippingAddress)
            </div>
        </div>
        <div class="tab-pane" id="items">
            <br />
            <div class="form-group">
                <label class="control-label col-md-2">@Html.TA("Add Product")</label>
                <div class="col-md-10">
                    <input id="txtAddProduct" type="text" class="form-control" placeholder="Search by sku, name or keyword" />
                </div>
            </div>
            <div data-bind="if: items().length > 0">
                <table class="table">
                    <tr>
                        <th>Product</th>
                        <th>Options</th>
                        <th class="col-md-1">@Html.TA("Quantity")</th>
                        <th class="col-md-2">@Html.TA("Price")</th>
                    </tr>
                    <tbody data-bind="foreach: items">
                        <tr>
                            <td data-bind="text: productName"></td>
                            <td data-bind="html: optionsDisplay"></td>
                            <td><input type="number" class="form-control input-sm" data-bind="value: quantity" /></td>
                            <td>
                                <div class="input-group">
                                    @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencyPrefix)))
                                    {
                                        <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencyPrefix))</span>
                                    }
                                    <input class="form-control input-sm" data-bind="value: itemPrice" />
                                    @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencySuffix)))
                                    {
                                        <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencySuffix))</span>
                                    }
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="row">
                    <div class="col-md-10 text-right"><label>@Html.TA("Subtotal")</label></div>
                    <div class="col-md-2" data-bind="text: formatCurrency(subtotal())"></div>
                </div>
                <div class="row">
                    <div class="col-md-7"></div>
                    <div class="col-md-3">
                        <select class="form-control input-sm" data-bind="options: shippingMethods, optionsText: function(item) { return item.name + ' (' + window.formatCurrency(item.amount) + ')' }, optionsValue: 'id', value: shippingMethodId, uniqueName: true"></select>
                    </div>
                    <div class="col-md-2">
                        <div class="input-group">
                            @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencyPrefix)))
                            {
                                <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencyPrefix))</span>
                            }
                            <input class="form-control input-sm" data-bind="value: shippingAmount" />
                            @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencySuffix)))
                            {
                                <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencySuffix))</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-10 text-right"><label>@Html.TA("Discount")</label></div>
                    <div class="col-md-2">
                        <div class="input-group">
                            @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencyPrefix)))
                            {
                                <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencyPrefix))</span>
                            }
                            <input class="form-control input-sm" data-bind="value: discount" />
                            @if (!string.IsNullOrEmpty(Settings.Get<string>(SettingField.CurrencySuffix)))
                            {
                                <span class="input-group-addon">@(Settings.Get<string>(SettingField.CurrencySuffix))</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-10 text-right"><label>@Html.TA("Tax")</label></div>
                    <div class="col-md-2" data-bind="text: formatCurrency(taxAmount())"></div>
                </div>
                <div class="row">
                    <div class="col-md-10 text-right"><label>@Html.TA("Total")</label></div>
                    <div class="col-md-2" data-bind="text: formatCurrency(total())"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addProductModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" data-bind="with: addProduct">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@Html.TA("Close")</span></button>
                <h4 class="modal-title" id="myModalLabel">Add Product</h4>
            </div>
            <div class="modal-body">
                <dl class="dl-horizontal">
                    <dt class="col-md-3">Product</dt>
                    <dd data-bind="text: name"></dd>
                </dl>
                <!-- ko with: ko.utils.arrayFilter(optionCategories(), function(c) { return c.type() != '@OptionCategoryType.Text' }) -->
                @Html.Partial("_Options")
                <!-- /ko -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">@Html.TA("Close")</button>
                <button type="button" class="btn btn-primary" id="btnAddProduct">@Html.TA("Add")</button>
            </div>
        </div>
    </div>
</div>

<script src="/Scripts/typeahead.bundle.js" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        function orderEditViewModel(data) {
            var self = this;
            ko.mapping.fromJS(data, {}, self);

            self.subtotal = ko.pureComputed(function () {
                var result = 0;
                for (var i = 0; i < self.items().length; i++) {
                    var item = self.items()[i];
                    result += item.quantity() * item.itemPrice();
                }
                return result;
            }, self);

            self.total = ko.computed(function () {
                if (self.discount() > 0)
                    self.discount(-self.discount());
                return parseFloat(self.subtotal()) +
                    parseFloat(self.discount()) +
                    @if (!Settings.Get<bool>(SettingField.TaxIncludedInPrices))
                    {
                        <text>parseFloat(self.taxAmount()) +</text>
                    }
                    parseFloat(self.shippingAmount());
            }, self);

            self.shippingMethods = ko.pureComputed(function () {
                var result = [];
                $.ajax({
                    type: 'POST',
                    url: "@Url.Action("GetShippingMethods")",
                    data: {
                        shippingAddress: ko.toJS(self.sameShippingAddress() ? self.billingAddress : self.shippingAddress),
                        items: ko.toJS(self.items),
                        discount: self.discount()
                    },
                    success: function (json) {
                        result = json;
                    },
                    dataType: "json",
                    async: false
                });
                return result;
            }, self).extend({ throttle: 1000 });

            self.taxAmount = ko.pureComputed(function () {
                var result = 0;
                $.ajax({
                    type: 'POST',
                    url: "@Url.Action("CalculateTax")",
                    data: {
                        billingAddress: ko.toJS(self.billingAddress),
                        items: ko.toJS(self.items),
                        discount: self.discount()
                    },
                    success: function (json) {
                        result = json;
                    },
                    dataType: "json",
                    async: false
                });
                return result;
            }, self).extend({ throttle: 1000 });

            self.shippingMethodId.subscribe(function (newValue) {
                for (var i = 0; i < self.shippingMethods().length; i++) {
                    if (self.shippingMethods()[i].id == newValue)
                        self.shippingAmount(self.shippingMethods()[i].amount);
                }
            });

            return self;
        };

        function productDetailsModel(data) {
            var self = this;

            var categoryMapping = {
                'optionCategories': {
                    create: function (category) {
                        return (new (function () {
                            this.selectedOption = ko.computed({
                                read: function () { },
                                write: function (value) {
                                    for (var i = 0; i < this.options().length; i++) {
                                        this.options()[i].selected(this.options()[i].id() == value);
                                    }
                                },
                                owner: this
                            });

                            ko.mapping.fromJS(category.data, {}, this);
                        })());
                    }
                }
            };

            ko.mapping.fromJS(data, categoryMapping, self);

            self.getSelectedOptions = function () {
                var selectedOptions = [];
                var categories = self.optionCategories();
                for (var i = 0; i < categories.length; i++) {
                    for (var j = 0; j < categories[i].options().length; j++) {
                        var option = categories[i].options()[j];
                        if (option.selected())
                            selectedOptions.push(option);
                    }
                }
                return selectedOptions;
            }

            self.selectedOptions = ko.computed(function () {
                var selectedOptions = self.getSelectedOptions();
                var optionsJson = [];
                for (var i = 0; i < selectedOptions.length; i++) {
                    optionsJson.push({
                        id: selectedOptions[i].id()
                    });
                }
                return JSON.stringify(optionsJson);
            }).extend({ throttle: 100 });

            self.skusFiltered = ko.computed(function () {
                var dummy = self.getSelectedOptions();
                var filteredSkus = [];
                for (var i = 0; i < self.skus().length; i++) {
                    var passes = true;
                    var sku = self.skus()[i];
                    var opts = JSON.parse(sku.optionsJson());

                    for (var j = 0; j < opts.length; j++) {
                        var opt = opts[j];
                        var category = $.grep(self.optionCategories(), function (cat) {
                            return cat.id() == opt.categoryId;
                        });

                        if (category.length > 0) {
                            category = category[0];
                            var selectedOpts = $.grep(category.options(), function (so) {
                                return so.selected();
                            });
                            if (selectedOpts.length == 0) continue;
                            var matches = $.grep(selectedOpts, function (so) {
                                return so.id() == opt.optionId;
                            });
                            if (matches.length > 0) continue;
                        }

                        passes = false;
                        break;
                    }

                    if (passes)
                        filteredSkus.push(sku);
                }
                return filteredSkus;
            }).extend({ throttle: 100 });

            self.displayPrice = ko.computed(function () {
                var filteredSkus = self.skusFiltered();

                if (filteredSkus.length == 1 && filteredSkus[0].price() > 0) {
                    return filteredSkus[0].price();
                }
                if (filteredSkus.length > 1) {
                    var minPrice = 0;
                    var maxPrice = 0;
                    for (var k = 0; k < filteredSkus.length; k++) {
                        var testsku = filteredSkus[k];
                        var skuPrice = testsku.price();
                        if (skuPrice == null) skuPrice = self.price();
                        if (skuPrice && (minPrice == 0 || skuPrice < minPrice))
                            minPrice = skuPrice;
                        if (skuPrice && skuPrice > maxPrice)
                            maxPrice = skuPrice;
                    }

                    if (minPrice != maxPrice && minPrice != 0) {
                        return minPrice;
                    }
                    if (minPrice == maxPrice && minPrice != 0) {
                        return minPrice;
                    }
                }

                return self.price();
            }).extend({ throttle: 100 });

            self.displayOptions = ko.computed(function () {
                var categories = self.optionCategories();
                var result = '';
                for (var i = 0; i < categories.length; i++) {
                    var options = [];
                    for (var j = 0; j < categories[i].options().length; j++) {
                        var option = categories[i].options()[j];
                        if (option.selected())
                            options.push(option);
                    }
                    if (options.length > 0) {
                        result += '<strong>' + categories[i].name() + '</strong>:';
                        for (var j = 0; j < options.length; j++) {
                            result += ' ' + options[j].name();
                        }
                        result += ' ';
                    }
                }
                return result;
            }).extend({ throttle: 100 });

            return this;
        }

        var model = new orderEditViewModel(@Html.Json(Model));
        window.ViewModel.order = model;
        window.ViewModel.addProduct = new productDetailsModel(@Html.Json(new ProductDetailsViewModel()));

        $('#@Html.IdFor(m => m.UserEmail)').on('change', function () {
            var email = $(this).val();
            if (!email) return;
            $.post("@Url.Action("LoadUserByEmail")", { email: email },
                function (result) {
                    if (result == null) return;
                    ko.mapping.fromJS(result.billingAddress, {}, window.ViewModel.order.billingAddress);
                    ko.mapping.fromJS(result.shippingAddress, {}, window.ViewModel.order.shippingAddress);
                });
        });

        var engine = new Bloodhound({
            name: 'products',
            remote: {
                url: '@Url.Action("FindProducts")#%QUERY',
                replace: function (url, query) {
                    return url + "#" + query;
                },
                ajax: {
                    type: "POST",
                    data: {
                        keywords: function () {
                            return $('#txtAddProduct').val();
                        }
                    }
                }
            },
            datumTokenizer: function (d) {
                return Bloodhound.tokenizers.whitespace(d.val);
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace
        });

        engine.initialize();

        $('#txtAddProduct').typeahead({
            highlight: true,
        }, {
            name: 'products',
            displayKey: 'name',
            source: engine.ttAdapter()
        });

        $('#txtAddProduct').bind('typeahead:selected', function (obj, datum, name) {
            $.post('@Url.Action("GetProductDetails")', { id: datum.id },
                function (result) {
                    ko.mapping.fromJS(result, {}, window.ViewModel.addProduct);
                    $('#addProductModal').modal();
                });
        });

        $('#btnAddProduct').on('click', function () {
            var product = window.ViewModel.addProduct;

            var skus = product.skusFiltered();
            if (skus.length > 1) {
                alert('@Html.TA("More than one SKU matches your selection. Please select the required options")');
                return;
            }
            var skuId = null;
            if (skus.length == 1) {
                skuId = skus[0].id();
            }

            model.items.push(ko.mapping.fromJS({
                productId: product.id(),
                productSkuId: skuId,
                productName: product.name(),
                optionsDisplay: product.displayOptions(),
                options: product.selectedOptions(),
                quantity: 1,
                itemPrice: product.displayPrice()
            }));
            $('#addProductModal').modal('hide');
            $('#txtAddProduct').val('');
        });
    });
</script>